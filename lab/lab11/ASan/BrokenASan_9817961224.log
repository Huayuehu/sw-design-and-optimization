student@studentVM:~$ g++ -fsanitize=address -ggdb -o ASan_test BrokenASan.cpp
student@studentVM:~$ ./ASan_test 
=================================================================
==2440==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffdc71fa5f8 at pc 0x000000400a14 bp 0x7ffdc71fa540 sp 0x7ffdc71fa530
READ of size 4 at 0x7ffdc71fa5f8 thread T0
    #0 0x400a13 in partition(int*, int, int) /home/student/BrokenASan.cpp:5
    #1 0x400d63 in quickSort(int*, int, int) /home/student/BrokenASan.cpp:30
    #2 0x400f04 in main /home/student/BrokenASan.cpp:50
    #3 0x7effc8a1782f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)
    #4 0x4008e8 in _start (/home/student/ASan_test+0x4008e8)

Address 0x7ffdc71fa5f8 is located in stack of thread T0 at offset 56 in frame
    #0 0x400e37 in main /home/student/BrokenASan.cpp:47

  This frame has 1 object(s):
    [32, 56) 'arr' <== Memory access at offset 56 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /home/student/BrokenASan.cpp:5 partition(int*, int, int)
Shadow bytes around the buggy address:
  0x100038e37460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100038e37470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100038e37480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100038e37490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100038e374a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x100038e374b0: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 00[f4]
  0x100038e374c0: f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00
  0x100038e374d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100038e374e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100038e374f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100038e37500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
==2440==ABORTING
student@studentVM:~$ ./ASan_test
=================================================================
==2467==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff7edcc8a8 at pc 0x000000400a14 bp 0x7fff7edcc7f0 sp 0x7fff7edcc7e0
READ of size 4 at 0x7fff7edcc8a8 thread T0
    #0 0x400a13 in partition(int*, int, int) /home/student/BrokenASan.cpp:5
    #1 0x400d63 in quickSort(int*, int, int) /home/student/BrokenASan.cpp:30
    #2 0x400f04 in main /home/student/BrokenASan.cpp:50
    #3 0x7ffa08aa782f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)
    #4 0x4008e8 in _start (/home/student/ASan_test+0x4008e8)

Address 0x7fff7edcc8a8 is located in stack of thread T0 at offset 56 in frame
    #0 0x400e37 in main /home/student/BrokenASan.cpp:47

  This frame has 1 object(s):
    [32, 56) 'arr' <== Memory access at offset 56 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /home/student/BrokenASan.cpp:5 partition(int*, int, int)
Shadow bytes around the buggy address:
  0x10006fdb18c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10006fdb18d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10006fdb18e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10006fdb18f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10006fdb1900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1
=>0x10006fdb1910: f1 f1 00 00 00[f4]f3 f3 f3 f3 00 00 00 00 00 00
  0x10006fdb1920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10006fdb1930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10006fdb1940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10006fdb1950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10006fdb1960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
==2467==ABORTING
student@studentVM:~$ g++ -fsanitize=address -ggdb -o ASan_test BrokenASan.cpp
student@studentVM:~$ ./ASan_test 
=================================================================
==2505==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffc74428fc8 at pc 0x000000400e02 bp 0x7ffc74428f40 sp 0x7ffc74428f30
READ of size 4 at 0x7ffc74428fc8 thread T0
    #0 0x400e01 in printArray(int*, int) /home/student/BrokenASan.cpp:41
    #1 0x400f2b in main /home/student/BrokenASan.cpp:52
    #2 0x7fbfb935082f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)
    #3 0x4008e8 in _start (/home/student/ASan_test+0x4008e8)

Address 0x7ffc74428fc8 is located in stack of thread T0 at offset 56 in frame
    #0 0x400e37 in main /home/student/BrokenASan.cpp:47

  This frame has 1 object(s):
    [32, 56) 'arr' <== Memory access at offset 56 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /home/student/BrokenASan.cpp:41 printArray(int*, int)
Shadow bytes around the buggy address:
  0x10000e87d1a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10000e87d1b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10000e87d1c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10000e87d1d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10000e87d1e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x10000e87d1f0: 00 00 f1 f1 f1 f1 00 00 00[f4]f3 f3 f3 f3 00 00
  0x10000e87d200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10000e87d210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10000e87d220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10000e87d230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10000e87d240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
==2505==ABORTING
student@studentVM:~$ g++ -fsanitize=address -ggdb -o ASan_test BrokenASan.cpp
student@studentVM:~$ ./ASan_test 
Sorted array: n1 5 7 8 9 10 nstudent@studentVM:~$ 
